"use strict";(self.webpackChunkelectron_rspack_website=self.webpackChunkelectron_rspack_website||[]).push([["4096"],{6129:function(e,n,i){i.r(n),i.d(n,{default:function(){return t}});var s=i(651),c=i(6971);function r(e){let n=Object.assign({h1:"h1",a:"a",ul:"ul",li:"li",strong:"strong",code:"code",p:"p",pre:"pre",h2:"h2",h3:"h3",div:"div",blockquote:"blockquote"},(0,c.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"performancechunksplit",children:["performance.chunkSplit",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#performancechunksplit",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"类型："})," ",(0,s.jsx)(n.code,{children:"Object"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"默认值："})," ",(0,s.jsx)(n.code,{children:"{ strategy: 'split-by-experience' }"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"performance.chunkSplit"})," 用于配置 Rsbuild 的拆包策略。配置项的类型 ",(0,s.jsx)(n.code,{children:"ChunkSplit"})," 如下:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"type ForceSplitting = RegExp[] | Record<string, RegExp>;\n\ninterface BaseChunkSplit {\n  strategy?:\n    | 'split-by-module'\n    | 'split-by-experience'\n    | 'all-in-one'\n    | 'single-vendor';\n  override?: SplitChunks;\n  forceSplitting?: ForceSplitting;\n}\n\ninterface SplitBySize {\n  strategy: 'split-by-size';\n  minSize?: number;\n  maxSize?: number;\n  override?: SplitChunks;\n  forceSplitting?: ForceSplitting;\n}\n\ninterface SplitCustom {\n  strategy: 'custom';\n  splitChunks?: SplitChunks;\n  forceSplitting?: ForceSplitting;\n}\n\ntype ChunkSplit = BaseChunkSplit | SplitBySize | SplitCustom;\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"chunksplitstrategy",children:["chunkSplit.strategy",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#chunksplitstrategy",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"Rsbuild 支持设置以下几种拆包策略："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"split-by-experience"}),": 根据经验制定的拆分策略，自动将一些常用的 npm 包拆分为体积适中的 chunk。"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"split-by-module"}),": 按 NPM 包的粒度拆分，每个 NPM 包对应一个 chunk。"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"split-by-size"}),"：根据模块大小自动进行拆分。"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"all-in-one"}),": 将所有代码全部打包到一个 chunk 中。"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"single-vendor"}),": 将所有 NPM 包的代码打包到一个单独的 chunk 中。"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"custom"}),": 自定义拆包配置。"]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"默认策略",children:["默认策略",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#默认策略",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["Rsbuild 默认采用 ",(0,s.jsx)(n.code,{children:"split-by-experience"})," 策略，如果你想使用其他拆包策略，可以通过 ",(0,s.jsx)(n.code,{children:"strategy"})," 选项来指定，比如："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"export default {\n  performance: {\n    chunkSplit: {\n      strategy: 'all-in-one',\n    },\n  },\n};\n"})}),"\n",(0,s.jsxs)(n.div,{className:"rspress-directive tip",children:[(0,s.jsx)(n.div,{className:"rspress-directive-title",children:"TIP"}),(0,s.jsx)(n.div,{className:"rspress-directive-content",children:(0,s.jsxs)(n.p,{children:["请参考 ",(0,s.jsx)(n.a,{href:"/guide/optimization/split-chunk",children:"拆包最佳实践"})," 章节来了解不同策略之间的差异。\n"]})})]}),"\n",(0,s.jsxs)(n.h2,{id:"chunksplitminsize",children:["chunkSplit.minSize",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#chunksplitminsize",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"类型："})," ",(0,s.jsx)(n.code,{children:"number"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"默认值："})," ",(0,s.jsx)(n.code,{children:"10000"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["当 ",(0,s.jsx)(n.code,{children:"performance.chunkSplit.strategy"})," 为 ",(0,s.jsx)(n.code,{children:"split-by-size"})," 时，可以通过 ",(0,s.jsx)(n.code,{children:"performance.chunkSplit.minSize"})," 配置项来指定 chunk 的最小大小，单位为字节。默认值为 10000。比如:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"export default {\n  performance: {\n    chunkSplit: {\n      strategy: 'split-by-size',\n      minSize: 20000,\n    },\n  },\n};\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"chunksplitmaxsize",children:["chunkSplit.maxSize",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#chunksplitmaxsize",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"类型："})," ",(0,s.jsx)(n.code,{children:"number"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"默认值："})," ",(0,s.jsx)(n.code,{children:"Number.POSITIVE_INFINITY"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["当 ",(0,s.jsx)(n.code,{children:"performance.chunkSplit.strategy"})," 为 ",(0,s.jsx)(n.code,{children:"split-by-size"})," 时，可以通过 ",(0,s.jsx)(n.code,{children:"performance.chunkSplit.maxSize"})," 配置项来指定 chunk 的最大大小，单位为字节。默认值为 ",(0,s.jsx)(n.code,{children:"Number.POSITIVE_INFINITY"}),"。比如:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"export default {\n  performance: {\n    chunkSplit: {\n      strategy: 'split-by-size',\n      maxSize: 50000,\n    },\n  },\n};\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"chunksplitforcesplitting",children:["chunkSplit.forceSplitting",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#chunksplitforcesplitting",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"类型："})," ",(0,s.jsx)(n.code,{children:"RegExp[] | Record<string, RegExp>"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"默认值："})," ",(0,s.jsx)(n.code,{children:"[]"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["通过 ",(0,s.jsx)(n.code,{children:"performance.chunkSplit.forceSplitting"})," 配置项可以将指定的模块强制拆分为一个独立的 chunk。"]}),"\n",(0,s.jsxs)(n.p,{children:["比如将 node_modules 下的 ",(0,s.jsx)(n.code,{children:"axios"})," 库拆分到 ",(0,s.jsx)(n.code,{children:"axios.js"})," 中："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"export default {\n  performance: {\n    chunkSplit: {\n      forceSplitting: {\n        axios: /node_modules[\\\\/]axios/,\n      },\n    },\n  },\n};\n"})}),"\n",(0,s.jsx)(n.p,{children:"相比直接配置 Rspack 的 splitChunks，这是一个更加简便的方式。"}),"\n",(0,s.jsxs)(n.div,{className:"rspress-directive tip",children:[(0,s.jsx)(n.div,{className:"rspress-directive-title",children:"TIP"}),(0,s.jsx)(n.div,{className:"rspress-directive-content",children:(0,s.jsxs)(n.p,{children:["注意，通过 ",(0,s.jsx)(n.code,{children:"forceSplitting"})," 配置拆分的 chunk 会通过 ",(0,s.jsx)(n.code,{children:"<script>"})," 标签插入到 HTML 文件中，作为首屏请求的资源。因此，请根据实际场景来进行适当地拆分，避免首屏资源体积过大。\n"]})})]}),"\n",(0,s.jsxs)(n.h2,{id:"chunksplitsplitchunks",children:["chunkSplit.splitChunks",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#chunksplitsplitchunks",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["当 ",(0,s.jsx)(n.code,{children:"performance.chunkSplit.strategy"})," 为 ",(0,s.jsx)(n.code,{children:"custom"})," 时，可以通过 ",(0,s.jsx)(n.code,{children:"performance.chunkSplit.splitChunks"})," 配置项来指定自定义的 Rspack 拆包配置。此配置会和 Rspack 的 splitChunks 配置进行合并（cacheGroups 配置也会合并）。比如:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"export default {\n  performance: {\n    chunkSplit: {\n      strategy: 'custom',\n      splitChunks: {\n        cacheGroups: {\n          react: {\n            test: /node_modules[\\\\/](react|react-dom)[\\\\/]/,\n            name: 'react',\n            chunks: 'all',\n          },\n        },\n      },\n    },\n  },\n};\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"chunksplitoverride",children:["chunkSplit.override",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#chunksplitoverride",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["当 ",(0,s.jsx)(n.code,{children:"performance.chunkSplit.strategy"})," 为 ",(0,s.jsx)(n.code,{children:"split-by-experience"}),"、",(0,s.jsx)(n.code,{children:"split-by-module"}),"、",(0,s.jsx)(n.code,{children:"split-by-size"})," 或 ",(0,s.jsx)(n.code,{children:"single-vendor"})," 时，可以通过 ",(0,s.jsx)(n.code,{children:"performance.chunkSplit.override"})," 配置项来自定义 Rspack 拆包配置，此配置会和 Rspack 的 splitChunks 配置进行合并（cacheGroups 配置也会合并）。比如:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"export default {\n  performance: {\n    chunkSplit: {\n      override: {\n        cacheGroups: {\n          react: {\n            test: /node_modules[\\\\/](react|react-dom)[\\\\/]/,\n            name: 'react',\n            chunks: 'all',\n          },\n        },\n      },\n    },\n  },\n};\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:'当 Rsbuild 构建 "node" 类型的产物时，由于 Node Bundles 不需要通过拆包来优化加载性能，因此 chunkSplit 规则不会生效。'}),"\n"]})]})}function l(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,c.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(r,{...e})}):r(e)}let t=l;l.__RSPRESS_PAGE_META={},l.__RSPRESS_PAGE_META["zh%2Fconfig%2Fperformance%2Fchunk-split.mdx"]={toc:[{text:"chunkSplit.strategy",id:"chunksplitstrategy",depth:2},{text:"默认策略",id:"默认策略",depth:3},{text:"chunkSplit.minSize",id:"chunksplitminsize",depth:2},{text:"chunkSplit.maxSize",id:"chunksplitmaxsize",depth:2},{text:"chunkSplit.forceSplitting",id:"chunksplitforcesplitting",depth:2},{text:"chunkSplit.splitChunks",id:"chunksplitsplitchunks",depth:2},{text:"chunkSplit.override",id:"chunksplitoverride",depth:2}],title:"performance.chunkSplit",frontmatter:{}}}}]);