"use strict";(self.webpackChunkelectron_rspack_website=self.webpackChunkelectron_rspack_website||[]).push([["4298"],{9458:function(e,n,s){s.r(n),s.d(n,{default:function(){return l}});var r=s(651),d=s(6971);function t(e){let n=Object.assign({h1:"h1",a:"a",ul:"ul",li:"li",strong:"strong",pre:"pre",code:"code",p:"p"},(0,d.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"devsetupmiddlewares",children:["dev.setupMiddlewares",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#devsetupmiddlewares",children:"#"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"类型："})}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"type SetupMiddlewaresServer = {\n  sockWrite: (\n    type: string,\n    data?: string | boolean | Record<string, any>,\n  ) => void;\n  environments: {\n    [name: string]: {\n      /**\n       * 获取当前环境的构建信息\n       */\n      getStats: () => Promise<Stats>;\n\n      /**\n       * 在服务端加载并执行构建产物\n       *\n       * @param entryName - 入口名称，和 Rsbuild source.entry 的某一个 key 值对应\n       * @returns 入口模块的返回值\n       */\n      loadBundle: <T = unknown>(entryName: string) => Promise<T>;\n\n      /**\n       * 获取编译后的 HTML 模版内容\n       */\n      getTransformedHtml: (entryName: string) => Promise<string>;\n    };\n  };\n};\n\ntype SetupMiddlewares = Array<\n  (\n    middlewares: {\n      unshift: (...handlers: RequestHandler[]) => void;\n      push: (...handlers: RequestHandler[]) => void;\n    },\n    server: SetupMiddlewaresServer,\n  ) => void\n>;\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"默认值："})," ",(0,r.jsx)(n.code,{children:"undefined"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"提供执行自定义函数和应用自定义中间件的能力。"}),"\n",(0,r.jsxs)(n.p,{children:["中间件的执行顺序是: ",(0,r.jsx)(n.code,{children:"unshift"})," => 内置中间件 => ",(0,r.jsx)(n.code,{children:"push"}),"。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"export default {\n  dev: {\n    setupMiddlewares: [\n      (middlewares, server) => {\n        middlewares.unshift((req, res, next) => {\n          next();\n        });\n\n        middlewares.push((req, res, next) => {\n          next();\n        });\n      },\n    ],\n  },\n};\n"})}),"\n",(0,r.jsx)(n.p,{children:"一些特殊场景需求可能需要使用服务器 API："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:'sockWrite。允许向 HMR 客户端传递一些消息，HMR 客户端将根据接收到的消息类型进行不同的处理。如果你发送一个 "content-changed " 的消息，页面将会重新加载。'}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"export default {\n  dev: {\n    setupMiddlewares: [\n      (middlewares, server) => {\n        // 添加自定义 watcher 并在文件更新时触发页面刷新\n        watcher.on('change', (changed) => {\n          server.sockWrite('content-changed');\n        });\n      },\n    ],\n  },\n};\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"environments。允许对指定的 environment 产物进行操作。"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"export default {\n  dev: {\n    setupMiddlewares: [\n      (middlewares, server) => {\n        middlewares.unshift(async (req, _res, next) => {\n          const webStats = await server.environments.web.getStats();\n\n          console.log(webStats.toJson({ all: false }));\n\n          next();\n        });\n      },\n    ],\n  },\n};\n"})})]})}function i(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,d.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(t,{...e})}):t(e)}let l=i;i.__RSPRESS_PAGE_META={},i.__RSPRESS_PAGE_META["zh%2Fconfig%2Fdev%2Fsetup-middlewares.mdx"]={toc:[],title:"dev.setupMiddlewares",frontmatter:{}}}}]);